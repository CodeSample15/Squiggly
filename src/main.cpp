#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <exception>

#include "linter.hpp"
#include "tokenizer.hpp"
#include "runner.hpp"
#include "frontend.hpp"

#if BUILD_FOR_RASPI
#include "Raspi-Port/Menu.hpp"
#endif

int parse_args(int argc, char** argv, std::vector<std::string>& fileLines);
void read_file(char* path, std::vector<std::string>& fileLines);
int run_squiggly(std::vector<std::string>& fileLines);

int main(int argc, char** argv) {
    std::vector<std::string> fileLines;

    #if BUILD_FOR_RASPI
    while(true) {
        std::string path = run_menu();
        
        std::cout << "Loading from " << path << std::endl;

        read_file((char*)path.c_str(), fileLines);
        for(std::string s : fileLines) {
            std::cout << s << std::endl;
        }

        run_squiggly(fileLines);

        //TODO: print any error messages generated by run_squiggly
    }

    return 0;
    #else
    return parse_args(argc, argv, fileLines) || run_squiggly(fileLines);
    #endif
}



/*
    Main Squiggly functionality:
*/
int parse_args(int argc, char** argv, std::vector<std::string>& fileLines) {
    //check to make sure file was passed as input to the program
    if(argc < 2) {
        std::cout << "No file not provided. Exiting..." << std::endl;
        return 0;
    }

    read_file(argv[1], fileLines);

    return 0;
}

void read_file(char* path, std::vector<std::string>& fileLines) {
    //attempt to open and then read from file
    std::ifstream file;
    file.open(path);
    if(!file.is_open()) {
        std::cout << "Could not find file \'" << path << "\' in current directory. Exiting..." << std::endl;
        return;
    }

    //read from the input file
    std::string temp;
    while(std::getline(file, temp)) {
        if(temp.empty())
            continue; //skip empty lines

        fileLines.push_back(temp);
    }
    file.close();
}

int run_squiggly(std::vector<std::string>& fileLines) {
    //TODO: Run linter
    Linter::preprocess(fileLines);

    //Run tokenizer
    try {
        Tokenizer::tokenize(fileLines);
    } catch(const std::exception& e) {
        std::cerr << "\n" << e.what() << std::endl;
        return 0;
    }

    //Execute script
    try {
        Runner::execute();
    } catch(const std::exception& e) {
        std::cerr << "\n" << e.what() << std::endl;
    }

    std::cout << "Program stopped successfully" << std::endl;

    return 0;
}